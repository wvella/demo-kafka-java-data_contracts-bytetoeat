/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.wvella.demo.datacontractsv1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PaymentInformation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4583410524921239982L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentInformation\",\"namespace\":\"io.confluent.wvella.demo.datacontractsv1\",\"fields\":[{\"name\":\"payment_method\",\"type\":{\"type\":\"enum\",\"name\":\"PaymentMethod\",\"symbols\":[\"CASH\",\"CREDIT_CARD\",\"DEBIT_CARD\",\"MOBILE_PAYMENT\"]}},{\"name\":\"ccn\",\"type\":\"string\",\"confluent:tags\":[\"PII\"]},{\"name\":\"amount\",\"type\":\"double\"},{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"payment_status\",\"type\":{\"type\":\"enum\",\"name\":\"PaymentStatus\",\"symbols\":[\"PENDING\",\"COMPLETED\",\"FAILED\",\"REFUNDED\"]}},{\"name\":\"payment_time\",\"type\":[\"null\",\"long\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentInformation> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentInformation> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentInformation> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentInformation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentInformation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentInformation to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentInformation from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentInformation instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentInformation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private io.confluent.wvella.demo.datacontractsv1.PaymentMethod payment_method;
  private java.lang.CharSequence ccn;
  private double amount;
  private java.lang.CharSequence currency;
  private io.confluent.wvella.demo.datacontractsv1.PaymentStatus payment_status;
  private java.lang.Long payment_time;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentInformation() {}

  /**
   * All-args constructor.
   * @param payment_method The new value for payment_method
   * @param ccn The new value for ccn
   * @param amount The new value for amount
   * @param currency The new value for currency
   * @param payment_status The new value for payment_status
   * @param payment_time The new value for payment_time
   */
  public PaymentInformation(io.confluent.wvella.demo.datacontractsv1.PaymentMethod payment_method, java.lang.CharSequence ccn, java.lang.Double amount, java.lang.CharSequence currency, io.confluent.wvella.demo.datacontractsv1.PaymentStatus payment_status, java.lang.Long payment_time) {
    this.payment_method = payment_method;
    this.ccn = ccn;
    this.amount = amount;
    this.currency = currency;
    this.payment_status = payment_status;
    this.payment_time = payment_time;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return payment_method;
    case 1: return ccn;
    case 2: return amount;
    case 3: return currency;
    case 4: return payment_status;
    case 5: return payment_time;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: payment_method = (io.confluent.wvella.demo.datacontractsv1.PaymentMethod)value$; break;
    case 1: ccn = (java.lang.CharSequence)value$; break;
    case 2: amount = (java.lang.Double)value$; break;
    case 3: currency = (java.lang.CharSequence)value$; break;
    case 4: payment_status = (io.confluent.wvella.demo.datacontractsv1.PaymentStatus)value$; break;
    case 5: payment_time = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'payment_method' field.
   * @return The value of the 'payment_method' field.
   */
  public io.confluent.wvella.demo.datacontractsv1.PaymentMethod getPaymentMethod() {
    return payment_method;
  }


  /**
   * Sets the value of the 'payment_method' field.
   * @param value the value to set.
   */
  public void setPaymentMethod(io.confluent.wvella.demo.datacontractsv1.PaymentMethod value) {
    this.payment_method = value;
  }

  /**
   * Gets the value of the 'ccn' field.
   * @return The value of the 'ccn' field.
   */
  public java.lang.CharSequence getCcn() {
    return ccn;
  }


  /**
   * Sets the value of the 'ccn' field.
   * @param value the value to set.
   */
  public void setCcn(java.lang.CharSequence value) {
    this.ccn = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public double getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public java.lang.CharSequence getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(java.lang.CharSequence value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'payment_status' field.
   * @return The value of the 'payment_status' field.
   */
  public io.confluent.wvella.demo.datacontractsv1.PaymentStatus getPaymentStatus() {
    return payment_status;
  }


  /**
   * Sets the value of the 'payment_status' field.
   * @param value the value to set.
   */
  public void setPaymentStatus(io.confluent.wvella.demo.datacontractsv1.PaymentStatus value) {
    this.payment_status = value;
  }

  /**
   * Gets the value of the 'payment_time' field.
   * @return The value of the 'payment_time' field.
   */
  public java.lang.Long getPaymentTime() {
    return payment_time;
  }


  /**
   * Sets the value of the 'payment_time' field.
   * @param value the value to set.
   */
  public void setPaymentTime(java.lang.Long value) {
    this.payment_time = value;
  }

  /**
   * Creates a new PaymentInformation RecordBuilder.
   * @return A new PaymentInformation RecordBuilder
   */
  public static io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder newBuilder() {
    return new io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder();
  }

  /**
   * Creates a new PaymentInformation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentInformation RecordBuilder
   */
  public static io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder newBuilder(io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder other) {
    if (other == null) {
      return new io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder();
    } else {
      return new io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder(other);
    }
  }

  /**
   * Creates a new PaymentInformation RecordBuilder by copying an existing PaymentInformation instance.
   * @param other The existing instance to copy.
   * @return A new PaymentInformation RecordBuilder
   */
  public static io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder newBuilder(io.confluent.wvella.demo.datacontractsv1.PaymentInformation other) {
    if (other == null) {
      return new io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder();
    } else {
      return new io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentInformation instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentInformation>
    implements org.apache.avro.data.RecordBuilder<PaymentInformation> {

    private io.confluent.wvella.demo.datacontractsv1.PaymentMethod payment_method;
    private java.lang.CharSequence ccn;
    private double amount;
    private java.lang.CharSequence currency;
    private io.confluent.wvella.demo.datacontractsv1.PaymentStatus payment_status;
    private java.lang.Long payment_time;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.payment_method)) {
        this.payment_method = data().deepCopy(fields()[0].schema(), other.payment_method);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.ccn)) {
        this.ccn = data().deepCopy(fields()[1].schema(), other.ccn);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.currency)) {
        this.currency = data().deepCopy(fields()[3].schema(), other.currency);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.payment_status)) {
        this.payment_status = data().deepCopy(fields()[4].schema(), other.payment_status);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.payment_time)) {
        this.payment_time = data().deepCopy(fields()[5].schema(), other.payment_time);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentInformation instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.wvella.demo.datacontractsv1.PaymentInformation other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.payment_method)) {
        this.payment_method = data().deepCopy(fields()[0].schema(), other.payment_method);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ccn)) {
        this.ccn = data().deepCopy(fields()[1].schema(), other.ccn);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.currency)) {
        this.currency = data().deepCopy(fields()[3].schema(), other.currency);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.payment_status)) {
        this.payment_status = data().deepCopy(fields()[4].schema(), other.payment_status);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.payment_time)) {
        this.payment_time = data().deepCopy(fields()[5].schema(), other.payment_time);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'payment_method' field.
      * @return The value.
      */
    public io.confluent.wvella.demo.datacontractsv1.PaymentMethod getPaymentMethod() {
      return payment_method;
    }


    /**
      * Sets the value of the 'payment_method' field.
      * @param value The value of 'payment_method'.
      * @return This builder.
      */
    public io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder setPaymentMethod(io.confluent.wvella.demo.datacontractsv1.PaymentMethod value) {
      validate(fields()[0], value);
      this.payment_method = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'payment_method' field has been set.
      * @return True if the 'payment_method' field has been set, false otherwise.
      */
    public boolean hasPaymentMethod() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'payment_method' field.
      * @return This builder.
      */
    public io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder clearPaymentMethod() {
      payment_method = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ccn' field.
      * @return The value.
      */
    public java.lang.CharSequence getCcn() {
      return ccn;
    }


    /**
      * Sets the value of the 'ccn' field.
      * @param value The value of 'ccn'.
      * @return This builder.
      */
    public io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder setCcn(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.ccn = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ccn' field has been set.
      * @return True if the 'ccn' field has been set, false otherwise.
      */
    public boolean hasCcn() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ccn' field.
      * @return This builder.
      */
    public io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder clearCcn() {
      ccn = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public double getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder setAmount(double value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder clearAmount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public java.lang.CharSequence getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder setCurrency(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.currency = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'payment_status' field.
      * @return The value.
      */
    public io.confluent.wvella.demo.datacontractsv1.PaymentStatus getPaymentStatus() {
      return payment_status;
    }


    /**
      * Sets the value of the 'payment_status' field.
      * @param value The value of 'payment_status'.
      * @return This builder.
      */
    public io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder setPaymentStatus(io.confluent.wvella.demo.datacontractsv1.PaymentStatus value) {
      validate(fields()[4], value);
      this.payment_status = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'payment_status' field has been set.
      * @return True if the 'payment_status' field has been set, false otherwise.
      */
    public boolean hasPaymentStatus() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'payment_status' field.
      * @return This builder.
      */
    public io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder clearPaymentStatus() {
      payment_status = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'payment_time' field.
      * @return The value.
      */
    public java.lang.Long getPaymentTime() {
      return payment_time;
    }


    /**
      * Sets the value of the 'payment_time' field.
      * @param value The value of 'payment_time'.
      * @return This builder.
      */
    public io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder setPaymentTime(java.lang.Long value) {
      validate(fields()[5], value);
      this.payment_time = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'payment_time' field has been set.
      * @return True if the 'payment_time' field has been set, false otherwise.
      */
    public boolean hasPaymentTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'payment_time' field.
      * @return This builder.
      */
    public io.confluent.wvella.demo.datacontractsv1.PaymentInformation.Builder clearPaymentTime() {
      payment_time = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentInformation build() {
      try {
        PaymentInformation record = new PaymentInformation();
        record.payment_method = fieldSetFlags()[0] ? this.payment_method : (io.confluent.wvella.demo.datacontractsv1.PaymentMethod) defaultValue(fields()[0]);
        record.ccn = fieldSetFlags()[1] ? this.ccn : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.amount = fieldSetFlags()[2] ? this.amount : (java.lang.Double) defaultValue(fields()[2]);
        record.currency = fieldSetFlags()[3] ? this.currency : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.payment_status = fieldSetFlags()[4] ? this.payment_status : (io.confluent.wvella.demo.datacontractsv1.PaymentStatus) defaultValue(fields()[4]);
        record.payment_time = fieldSetFlags()[5] ? this.payment_time : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentInformation>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentInformation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentInformation>
    READER$ = (org.apache.avro.io.DatumReader<PaymentInformation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.payment_method.ordinal());

    out.writeString(this.ccn);

    out.writeDouble(this.amount);

    out.writeString(this.currency);

    out.writeEnum(this.payment_status.ordinal());

    if (this.payment_time == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.payment_time);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.payment_method = io.confluent.wvella.demo.datacontractsv1.PaymentMethod.values()[in.readEnum()];

      this.ccn = in.readString(this.ccn instanceof Utf8 ? (Utf8)this.ccn : null);

      this.amount = in.readDouble();

      this.currency = in.readString(this.currency instanceof Utf8 ? (Utf8)this.currency : null);

      this.payment_status = io.confluent.wvella.demo.datacontractsv1.PaymentStatus.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.payment_time = null;
      } else {
        this.payment_time = in.readLong();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.payment_method = io.confluent.wvella.demo.datacontractsv1.PaymentMethod.values()[in.readEnum()];
          break;

        case 1:
          this.ccn = in.readString(this.ccn instanceof Utf8 ? (Utf8)this.ccn : null);
          break;

        case 2:
          this.amount = in.readDouble();
          break;

        case 3:
          this.currency = in.readString(this.currency instanceof Utf8 ? (Utf8)this.currency : null);
          break;

        case 4:
          this.payment_status = io.confluent.wvella.demo.datacontractsv1.PaymentStatus.values()[in.readEnum()];
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.payment_time = null;
          } else {
            this.payment_time = in.readLong();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










